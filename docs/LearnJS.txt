net 8 4
agular 5 8
---------------------------------
- JS không tự chèn chấu ; trước []
- Dùng +a để chuyển a về số
- Dùng " - 7 để chuyển "" -> 0
- " " và "0" mang giá trị boolean là true (khác với "" -> false)
- 0, "", null, undefined, NaN --> false.
- == so sánh giá trị ==== so sánh giá trị và kiểu dữ liệu
- ?? dùng để kiểm tra biến có được gán hay chưa, nếu rồi thì trả về chính nó, chưa thì trả về giá trị thứ 2 (thường dùng đẻ gán giá trị mặc định)
- case dùng ===

- NÊN CMT: 
Overall architecture, high-level view.
Function usage.
Important solutions, especially when not immediately obvious.
- KO NÊN CMT:
That tell “how code works” and “what it does”.
Put them in only if it’s impossible to make the code so simple and self-descriptive that it doesn’t require them.

- NaN là unique

- Các hàm parseInt, parseFloat chỉ có thể thành công nếu ký tự khác số ko làm cản trở quá trình duỵet tìm số từ trái qua phải

- Slice ko bao gồm index ở tham số thứ 2

- localeCompare để só sánh chữ theo utf-8

- 1_000_000

- push và pop nhanh hơn shift và unshift do nó chỉ xóa thay vì phải cập nhật vị trí các phần tử còn lại

- for in lặp qua các enumerable property, không nên dùng cho aray vì nó lặp qua tất cả thuộc tính, ảnh hưởng đến hiệu suất aray-like (chứa các thuộc tính ko phải số nữa)
- for of lặp qua giá trị

- có thể dùng thuộc tính có key là symbol để ẩn nó khỏi vòng lặp, tăng bảo mật
---------------------------------
- arr.length có thể ghi đè, nếu gán số nhỏ hơn sẽ bị cắt giảm --> Mất data
- arr.find(item => ...) dùng để kiếm 1 item khác với arr.Filter
- ar.map để map các item với giá trị mới
- arr.sort sẽ convert các item về chuỗi để so sÁNH TRỪ KHI CÓ một hàm định nghĩa cách so sánh được truyền vào (nhận 2 tham số và return về một giá trị số (âm là bé hơn, 0 là bằng nhau, dương là lớn hơn))
VD: arr.sort((a, b) => b - a); --> sắp xếp giảm
- arr.reduce dùng để lặp và trả về 1 giá trị duy nhất, có 2 tham số thường dùng (kq của lần gọi hàm trước đó, item)
- có thể dùng slice() để copy mảng
------------------------------
- weakMap weakSet để tiết kiệm bộ nhớ, loại bỏ các obj ko có tham chiếu đến n
- JS tự động loại bỏ các obj ko có tham chiếu trừ trường hợp obj nằm trong arr hoặc map
-------------------------------
- Destructuring dùng để phân rã các item của 1 iterable tùy chọn thành các biến, có thể để trống để bỏ qua 
VD: let arr = ["John", "This will be skipped", "Smith"]
let [firstName, , surname] = arr;
- Có thể dùng Destructuring để hoán đổi giá trị các biến
- Có thể dung ...AnyName (đặt ở cuối cùng) để lấy tất cả giá trị còn lại (AnyName sẽ là 1 mảng)
- Có thể gán giá trị mặc định cho các biến
- Destructuring đối với obj thì dùng cặp dấu ngoặc nhọn
- Khi obj và arr là tham số của hàm, có thể dùng Destructuring để bóc tách các thuộc tính của ibj và arr
-------------------------------------
- JSON chỉ chứa "" ko có '', các thuộc tính được bọc trong dấu ""
- JSON ko chứa phương thức và các thuộc tính symbol
- JSON.stringify(value, replacer, space) : replacer là hàm thay thế tránh bị vòng lặp trong json, space là số khoảng trắng được dũng cho mỗi dòng cấp con trong json (khác 0 thì sẽ uôn xuống dòng)
--------------------------------------
- Biến ...args là mảng tham số đặc biệt cho hàm
- ...arr dùng để trải dài các phần tử của mảng hoặc obj
- Có thể dùng [...arr] dể copy mảng hoặc obj
---------------------------------------
- Closure là một tập hợp các hàm được viết lồng vào trong một hàm khác
- Closure lưu trữ giá trị của outer function theo kiểu tham chiếu
- Closure được tạo ra bằng cách return 1 hàm ở trong 1 hàm khác, các thuộc tính của hàm ngoài sẽ được giữ lại và đính kèm với hàm con để ko mất dữ liệu (JS sẽ ko dọn dẹp bộ nhớ sau khi hàm đã return đối với closure)
----------------------------------------
- vả không có phạm vi khối nhưng có phạm vi hàm
- var có thể đc dùng trước khi nó được định nghĩa bởi vì JS sẽ hoist phần khai báo lên trên cùng
------------------------------------------
- Bất cứ thứ gì được khai báo bằng var đều là thuộc tính của global obj
-----------------------------------------
- Có thể tạo hàm bằng câu lệnh new Function ([arg1, arg2, ...argN], functionBody); --> cực kì hữu dụng khi tạo hàm có phần thân động dựa trên các chuỗi do server trả về
------------------------------------------
- setTimeout lồng nhau sẽ đảm bảo thời gian ngắt quãng đều nhau, setInterval do tốn thời gian thực thi mã nên sẽ ko đều
----------------------------------------
- Các obj kế thừa dựa vào prototype
----------------------------------------
- Cội nguồn của Class là các hàm lồng nhau (closure) và prototype
- Mixin là những class chỉ chứa các phương thức để add vào class khác mà ko thông qua kế thừa (dùng Object.assign(MyClass.prototype, methodMixin) để copy phương thức)
-----------------------------------------
- Hàm mũi tên ko có this riêng mà sẽ lấy this từ ngữ cảnh mà nó được gọi
- this của hàm thông thường sẽ bị thay đổi tùy theo ngữ cảnh được gọi (mặc định là đối tượng window hoặc undefined)
- Phương thức và thuộc tính static cũng có thể được kế thừa, nó vẫn được gọi trực tiếp qua tên lớp
-------------------------------------------
- 1 số quy ước đặt tên
- Thuộc tính public name
- Thuộc tính private #name
- Thuộc tính protacted _name
---------------------------------------------
- Try catch kiểm tra lỗi ở runtime, nếu có lỗi xảy ra trong các code đã được lập lịch như setInterval thì nó sẽ ko bắt đc lỗi nên try catch phải để bên trong 
- Promise resolve chỉ thực hiện câu lệnh réolve đầu tiên
- 2 hàm callbak resolve và reject sẽ trả về 1 giá trị, là hàm có sẵn của JS
- Promise sinh ra để tránh trường hợp callback hell
- Các then nối tiếp sẽ bất đồng bộ, các promise return promise là đồng bộ
- Promise rất tiện dụng trong việc xử lý dữ liệu 
- try then catch là câu lệnh bất đồng bộ, các code bên dưới nó vẫn được thực thi
- async luôn trả về 1 promise
--------------------------------------------
- Đối với obj khi dùng this sẽ có một số trường hợp mất ngữ cảnh, có thể dùng bind() hoặc hàm vô danh để khác phục

---------------------------------------------
Một module có thể bao gồm một file hoặc nhiều file, và các file này có thể tương tác với nhau thông qua các export/import.
- import chỉ thực hiện code 1 lần duy nhất vì vayạ, nếu nhiều file cùgf import thì chúng có thể thay đổi dữ liệu của module, dùng chung 1 dữ liệu
- Khác với react, các module muốn sử dụng phải viết code ở thẻ script có type=module
- Các module có tính trì hoãn, script chỉ chạy sau khi toàn bộ trang đã load
----------------------------------------------
- Chỉ có 1 export default trong 1 file
- export default ko cần tên
- import thông thường cần { } cho các module đã được đặt tên, còn import default thì ko cần
- export thông thường cần phải import đúng tên của module, trong khi export default thì ko
- export from khác với import from ở chỗ những module mà nó sử dụng không nằm ở file hiện tại (VD như các package từ bên ngoài cần che giấu cấu trúc thư mục khỏi người dùng, các module cùng chung thư mục ultils khi import from sẽ có đường dẫn khác nhau do phải trỏ trực tiếp đến đường dẫn của nó, export from cho phép import lại chúng chung 1 đường dẫn duy nhất) 
---------------------------------------------
- Proxy dùng để bọc các đối tượng và chặn các hành vi ko mong muốn trên đối tượng
-------------------------------------------
- Có thể render code từ chuỗi
- có thể tách f(a,b,c) thành f(a)(b(c) bằng curry
- Bigint chỉ có thể tính toán với bigint
- +value ko hoạt động với bigint
- WeakRef thường được sử dụng để tạo bộ nhớ đệm hoặc mảng liên kết lưu trữ các đối tượng sử dụng nhiều tài nguyên.(xử lý ảnh)
- WeakRef lưu trữ tham chiếu và ngăn đối tượng ko bị trình gom rác chộp lấy, hữu ích trong việc giữ tham chiếu đến tượng tạm thời, không muốn lưu trữ trong bộ nhớ lâu dài
=================================
??? chú ý hàm lồng nhau (closure)
??? con trỏ this
=================================



- DOM biểu diễn mọi athứ trên trang dưới dạng các đối tượng có thể chỉnh sửa